Conceitos de POO:
  POO é um paradigma de programação baseado no conceito de "objetos", que podem conter dados na forma de campos, também conhecidos como atributos, e códigos, na forma de procedimentos, também conhecidos como métodos.
  Como se trata de um contexto análogo ao mundo real, tudo no qual nos referimos são objetos, exemplo: Conta bancária, Aluno, Veículo, Transferência etc...

Pilares do POO:

  Encapsulamento: Nem tudo precisa estar visível, grande parte do nosso algoritmo pode ser distribuído em métodos com finalidades específicas que complementa uma ação em nossa aplicação.
  Ex: 
  Ligar um veículo exige muitas etapas para a engenharia, mas o condutor só visualiza a ignição, dar a partida e a "magia" acontece.

  Herança: Características e comportamentos comuns podem ser elevados e compartilhados através de uma hierarquia de objetos.
  Ex: Um carro e uma Motocicleta possuem propriedadades como chassi, ano de fabricação e métodos como acelerar, frear. Logo para não ser um processo de codificação redundante, podemos desfrutar da herança criando uma classe Veiculo para que seja herdada por Carro e Motocicleta.

  Abstração: É a indisponibilidade para determinar a lógica de um ou vários comportamentos em um objeto.
  Ex: Veiculo determina duas ações como acelerar e frear, logo estes comportamentos deverão ser abstratos pois existem mais de uma maneira de se realizar a mesma operação.

  Polimorfismo: São inúmeras maneras de se realizar uma mesma ação.
  Ex: Veículo determina duas ações como acelerar e frear, primeiramente precisamos identificar se estaremos nos referindo a Carro ou Motocicleta para determinar a lógica de aceleração e frenagem dos respectivos veículos.
-------------------------------------------------------------------------------------------------

CLASSES :

Classe de modelo(model):
  Classes que representam estrutura de domínio da aplicação, exemplo: Cliente, Pedido, Nota Fiscal etc.

Classe de serviço(service):
  Classes que contém regras de negócio e validação de nosso sistema.  

Classe de repositório(repository):
  Classes que contém uma integração com banco de dados.

Classe de controle(controller):
  Classes que possuem a finalidade de disponibilizar alguma comunicação externa à nossa aplicação, tipo http, web ou webservices.

Classe utilirária(util):
  Classe que contém recursos comuns à toda nossa aplicação. 